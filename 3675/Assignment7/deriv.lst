Mon Nov 13 18:10:21 2017
ECU Cinnameg, version 9.2.1 (byte code version 75)
File /home/INTRA/edwardsja15/3675/Assignment7/deriv.cmg


   1 %% Name: Jack Edwards
   2 %% Date: 11/10/17
   3 %% Tabs: 2
   4 
   5 Package derivative
   6 
   7 ==============================================================
   8 %% This package defines type Expression, and 
   9 %% some functions on expressions, including
  10 %% 
  11 %%    taking the derivative of an expression
  12 %%   
  13 %%    simplifying an expression
  14 %%   
  15 %% The simplification is rudimentary.
  16 ==============================================================
  17 
  18 ==============================================================
  19                         export
  20 ==============================================================
  21 
  22 ==============================================================
  23 %%                      Expression
  24 ==============================================================
  25 %% The expression type is defined in the body of this package
  26 %% so that its representation is hidden from view.  Here,
  27 %% we only advertise that the type exists.
  28 ==============================================================
  29 
  30 %: An expression involves constants, an independent variable
  31 %: called xx and a collection of operations.  The operations
  32 %: that are supported are
  33 %:
  34 %:   xx                 The independent variable
  35 %:   constant(c)        A constant expression having value c
  36 %:   A+B                The sum of expressions A and B
  37 
  38 Type Expression interface
  39 
  40   with ==, $
  41 %Type

--> Relate Derivative.Expression belongsTo Cmg.AnyEq

--> cmg.$
              : (Expression -> String)
              Expect {--public--}

--> cmg.==
              : ((Expression, Expression) -> Boolean)
              Expect {--public--}

  42 
  43 ==============================================================
  44 %%                derivativeX
  45 ==============================================================
  46 
  47 Exception derivativeX(Expression) 
  48   "Unable to take the derivative of an expression"
  49 %Exception

--> derivative.derivativeX
              : (Expression -> ExceptionType)
              Pattern {--public--}

--> derivative.derivativeX
              : (Expression -> ExceptionType)
              Define {--public--}

--> derivative.derivativeX?
              : (ExceptionType -> Boolean)
              Define {--public--}

--> derivative.derivativeXS
              : {ExceptionKind}
              Define {--public--}

--> derivative.underivativeX
              : (ExceptionType -> Expression)
              Define {--public--}

  50 
  51 ==============================================================
  52 %%                      Functions
  53 ==============================================================
  54 %% Here are the exported functions for expressions.  Only 
  55 %% these are public.
  56 ==============================================================
  57 
  58 Expect
  59   constant      : Real -> Expression
  60   
  61                 %: constant(r) is an expression that is the
  62                 %: real number r.  For example, constant(2.5)
  63                 %: is the real number 2.5, as an expression.

--> derivative.constant
              : (Real -> Expression)
              Expect {--public--}

  64                 ;
  65                 
  66   xx            : Expression
  67   
  68                 %: xx is the independent variable.

--> derivative.xx
              : Expression
              Expect {--public--}

  69                 ;
  70                 
  71   +             : (Expression, Expression) -> Expression
  72   
  73                 %: a + b is the expression that is the sum of
  74                 %: expressions a and b.

--> derivative.+
              : ((Expression, Expression) -> Expression)
              Expect {--public--}

  75                 ;
  76                 
  77   derivative    : Expression -> Expression
  78   
  79                 %: deriv(e) is the derivative of e with
  80                 %: respect to variable xx.

--> derivative.derivative
              : (Expression -> Expression)
              Expect {--public--}

  81                 ;
  82   
  83   simplify      : Expression -> Expression
  84   
  85                 %: simplify(e) is a (possibly) simplified
  86                 %: form of expression e.

--> derivative.simplify
              : (Expression -> Expression)
              Expect {--public--}

  87                 ;
  88 
  89 %Expect
  90 
  91 
  92 ========================================================
  93                         implementation
  94 ========================================================
  95 
  96 Import "math/functions.cmg".

--> Import "/usr/local/lib/cinnameg/9-2-1/lib/math/functions.cmg"

--> Import "/usr/local/lib/cinnameg/9-2-1/lib/math/math.cmg"

  97 
  98 ========================================================
  99 %%                 Type Expression
 100 ========================================================
 101 %% Here, type Expression type and its constructors
 102 %% and unconstructors are defined.  We do not want the
 103 %% default definition of $, and instead define our own.
 104 ========================================================
 105 
 106 Type Expression =
 107   
 108   --------------------------------------------------
 109   %% An expression can be a real constant.
 110   --------------------------------------------------
 111     
 112   | constant(Real)
 113     
 114   --------------------------------------------------
 115   %% An expression can be the independent variable xx.
 116   --------------------------------------------------
 117     
 118   | xx
 119     
 120   --------------------------------------------------
 121   %% An expression can be the sum of two expressions.
 122   --------------------------------------------------
 123     
 124   | Expression + Expression
 125 
 126   %%An expression is the subtraction of two expressions
 127   
 128   | Expression - Expression
 129 
 130   %%An expression is the multiplication of two expressions
 131 
 132   | Expression * Expression
 133 
 134   %%An expression is the xponentiation of two expressions
 135 
 136   | Expression ^ Expression
 137 
 138   with ==
 139     
 140 %Type

--> public type Derivative.Expression

--> Relate Derivative.Expression belongsTo Cmg.AnyEq

--> cmg.==
              : ((Expression, Expression) -> Boolean)
              Define {--public--}

--> derivative.+
              : ((Expression, Expression) -> Expression)
              Pattern {--public--}

--> derivative.+
              : ((Expression, Expression) -> Expression)
              Define {--public--}

--> derivative.constant
              : (Real -> Expression)
              Pattern {--public--}

--> derivative.constant
              : (Real -> Expression)
              Define {--public--}

--> derivative.xx
              : Expression
              Pattern {--public--}

--> derivative.xx
              : Expression
              Define {--public--}

--> private.*
              : ((Expression, Expression) -> Expression)
              Pattern {--private--}

--> private.*
              : ((Expression, Expression) -> Expression)
              Define {--private--}

--> private.*/-
              : (Expression -> (Expression, Expression))
              Define {--private--}

--> private.*?
              : (Expression -> Boolean)
              Define {--private--}

--> private.+/-
              : (Expression -> (Expression, Expression))
              Define {--private--}

--> private.+?
              : (Expression -> Boolean)
              Define {--private--}

--> private.-
              : ((Expression, Expression) -> Expression)
              Pattern {--private--}

--> private.-
              : ((Expression, Expression) -> Expression)
              Define {--private--}

--> private.-/-
              : (Expression -> (Expression, Expression))
              Define {--private--}

--> private.-?
              : (Expression -> Boolean)
              Define {--private--}

--> private.^
              : ((Expression, Expression) -> Expression)
              Pattern {--private--}

--> private.^
              : ((Expression, Expression) -> Expression)
              Define {--private--}

--> private.^/-
              : (Expression -> (Expression, Expression))
              Define {--private--}

--> private.^?
              : (Expression -> Boolean)
              Define {--private--}

--> private.constant?
              : (Expression -> Boolean)
              Define {--private--}

--> private.unconstant
              : (Expression -> Real)
              Define {--private--}

--> private.xx?
              : (Expression -> Boolean)
              Define {--private--}

 141 ========================================================
 142 
 143 ========================================================
 144 %%              Expression Simplification
 145 ========================================================
 146 
 147 ========================================================
 148 %%                      simplifySum
 149 ========================================================
 150 %% simplifySum(e) is a (possibly) simplified form
 151 %% of expression e, which is presumed to be a sum.
 152 %% The following simplifications are employed.
 153 %%
 154 %%    0 + a = a         a + 0 = a
 155 %%
 156 %%    Computation with constants.  We replace 
 157 %%    constant(m) + constant(n) by constant(m+n).
 158 %%
 159 %% simplifySum only looks at e to see if it
 160 %% is exactly one of these forms.  It does not
 161 %% look inside e for subexpressions that have these
 162 %% forms.
 163 ========================================================
 164 
 165 Define
 166   
 167   ----------------------------------------------------
 168   %% constant arithmetic
 169   ----------------------------------------------------
 170 
 171   case simplifySum(constant(m) + constant(n)) = constant(m+n)
 172 
 173   ----------------------------------------------------
 174   %% 0 + a = a
 175   ----------------------------------------------------
 176 
 177   case simplifySum(constant(0) + a)  = a
 178 
 179   ----------------------------------------------------
 180   %% a + 0 = a
 181   ----------------------------------------------------
 182 
 183   case simplifySum(a + constant(0))  = a
 184 
 185   ----------------------------------------------------
 186   %% Otherwise, don't simplify.  Return a as is.
 187   ----------------------------------------------------
 188 
 189   else simplifySum(a) = a
 190 %Define

--> private.simplifySum
              : (Expression -> Expression)
              Define {--private--}

 191 
 192 Define
 193   %%constant arithmetic
 194   case simplifyMinus(constant(m) + constant(n)) = constant(m-n)
 195 
 196   %% a - 0 = a
 197   case simplifyMinus(a - constant(0)) = a
 198 
 199   else simplifyMinus(a) = a
 200 %Define

--> private.simplifyMinus
              : (Expression -> Expression)
              Define {--private--}

 201 
 202 Define
 203   %%constant arithmetic
 204   case simplifyProduct(constant(m) * constant(n)) = constant(m*n)
 205 
 206   %%0 * a = 0
 207   case simplifyProduct(constant(0) * a) = constant(0)
 208 
 209   %%a * 0 = 0
 210   case simplifyProduct(a * constant(0)) = constant(0)
 211 
 212   %%1 * a = a
 213   case simplifyProduct(constant(1) * a) = a
 214 
 215   %%a * 1 = a
 216   case simplifyProduct(a * constant(1)) = a
 217   
 218   else simplifyProduct(a) = a
 219 %Define

***Line 207, file /home/INTRA/edwardsja15/3675/Assignment7/deriv.cmg:
  In the definition of 'simplifyProduct':
  Warning:
  Identifier 'a' is defined but not used.  This might be an error.
  To avoid this warning with pattern matching, try using an
  anonymous pattern variable '?'.

***Line 210, file /home/INTRA/edwardsja15/3675/Assignment7/deriv.cmg:
  In the definition of 'simplifyProduct':
  Warning:
  Identifier 'a' is defined but not used.  This might be an error.
  To avoid this warning with pattern matching, try using an
  anonymous pattern variable '?'.

--> private.simplifyProduct
              : (Expression -> Expression)
              Define {--private--}

 220  
 221  Define
 222    %% 0^0 = undefined
 223    %%refuse to compute 0^0
 224    case simplifyPower(constant(0) ^ constant(0)) = constant(0) ^ constant(0)
 225    
 226    %%constant arithmetic
 227    case simplifyPower(constant(m) ^ constant(n)) = constant(m ^* n)
 228    
 229    %%a^0 = 1
 230    case simplifyPower(? ^ constant(0)) = constant(1)
 231    
 232    %%0^a = 0
 233    case simplifyPower(constant(0) ^ ?) = constant(0)
 234    
 235    %%a^1 = a
 236    case simplifyPower(a ^ constant(1)) = a
 237    
 238    %%1^a = 1
 239    case simplifyPower(constant(1) ^ ?) = constant(1)
 240  %Define

***Line 221, file /home/INTRA/edwardsja15/3675/Assignment7/deriv.cmg:
  In the definition of 'simplifyPower':
  Warning:
  Patterns might not be exhaustive.  You might need more cases.
  Missing case: simplifyPower (constant)

  (Each parameter is described by the constructor that would build it.
  For example, :: indicates a nonempty list, and nil indicates an
  empty list.  ? indicates a parameter whose value does not matter
  or a case where many values might not match.)

--> private.simplifyPower
              : (Expression -> Expression)
              Define {--private--}

 241 
 242 ========================================================
 243 %%                      simplify
 244 ========================================================
 245 %% Function simplify does a full simplification, going into
 246 %% the structure of an expression looking for subexpressions
 247 %% that can be simplified.
 248 ========================================================
 249 
 250 Define
 251   case simplify(constant(r)) = constant(r)
 252   case simplify(=xx)         = xx
 253 
 254   case simplify(a + b)       = simplifySum(simplify(a) + simplify(b))
 255 
 256   case simplify(a - b)       = simplifyMinus(simplify(a) - simplify(b))
 257 
 258   case simplify(a * b)       = simplifyProduct(simplify(a) * simplify(b))
 259   
 260   case simplify(a ^ b)       = simplifyPower(simplify(a) ^ simplify(b))
 261 %Define

--> derivative.simplify
              : (Expression -> Expression)
              Define {--public--}

 262 
 263 
 264 ========================================================
 265 %%                      Computing Derivatives
 266 ========================================================
 267 
 268 ========================================================
 269 %%                      deriv
 270 ========================================================
 271 %% deriv(e) is the derivative of expression e with
 272 %% respect to variable xx, but it does not do any
 273 %% simplifications.  It employs the rules for
 274 %% derivatives directly.
 275 ========================================================
 276 
 277 Define 
 278     
 279   ----------------------------------------------------
 280   %% c' = 0.
 281   ----------------------------------------------------
 282 
 283   case deriv(constant(?)) = constant(0)
 284 
 285   ----------------------------------------------------
 286   %% xx' = 1.
 287   ----------------------------------------------------
 288 
 289   case deriv(=xx) = constant(1)
 290 
 291   ----------------------------------------------------
 292   %% (a+b)' = a' + b'.
 293   ----------------------------------------------------
 294 
 295   case deriv(a + b) = deriv(a) + deriv(b)
 296 
 297   %% (a-b)' = a' - b'
 298   
 299   case deriv(a - b) = deriv(a) - deriv(b)
 300 
 301   %% (a * b)' = (a * b') + (a' * b)
 302   
 303   case deriv(a * b) = a * deriv(b) + deriv(a) * b
 304 
 305   %% (a^c)' = c * a^(c-1)
 306 
 307   case deriv(a^constant(c)) = constant(c) * a ^ constant(c-1)
 308   
 309   else deriv(e) = fail(derivativeX(e))
 310   
 311 %Define

--> private.deriv
              : (Expression -> Expression)
              Define {--private--}

 312 
 313 ========================================================
 314 %%                      derivative
 315 =======================================================
 316 
 317 Define derivative(a) = simplify(deriv(a)).

--> derivative.derivative
              : (Expression -> Expression)
              Define {--public--}

 318 
 319 ========================================================
 320 %%                      $ for Expressions
 321 ========================================================
 322 %% Function $ is used to convert an expression to a string.
 323 %% It tries to make the expression look readable.
 324 ========================================================
 325 
 326 Define
 327   case $(constant(r)) = $(r)
 328   case $(=xx)         = "x"
 329   case $(a + b)       = concat["(", $(a), "+", $(b), ")"]
 330   case $(a - b)       = concat["(", $(a), "-", $(b), ")"]
 331   case $(a * b)       = concat["(", $(a), "*", $(b), ")"]
 332   case $(a ^ b)       = concat["(", $(a), "^", $(b), ")"]
 333 %Define

--> cmg.$
              : (Expression -> String)
              Define {--public--}

 334 
 335 %Package


deriv.cmg:
There were warnings.
